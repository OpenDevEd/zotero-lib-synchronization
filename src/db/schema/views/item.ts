// import { pgView, QueryBuilder } from "drizzle-orm/pg-core";
// import { item } from "../tables/item";
// import { eq, InferModelFromColumns, InferSelectModel } from "drizzle-orm";

// const qb = new QueryBuilder();

// export const artworkView = pgView("artwork").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     artworkMedium: item.artworkMedium,
//     artworkSize: item.artworkSize,
//     date: item.date,
//     shortTitle: item.shortTitle,
//     archive: item.archive,
//     archiveLocation: item.archiveLocation,
//     libraryCatalog: item.libraryCatalog,
//     callNumber: item.callNumber,
//     url: item.url,
//     accessDate: item.accessDate,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "Artwork")));

// export const audioRecordingView = pgView("audioRecording").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     audioRecordingFormat: item.audioRecordingFormat,
//     seriesTitle: item.seriesTitle,
//     volume: item.volume,
//     numberOfVolumes: item.numberOfVolumes,
//     place: item.place,
//     label: item.label,
//     date: item.date,
//     runningTime: item.runningTime,
//     ISBN: item.ISBN,
//     shortTitle: item.shortTitle,
//     archive: item.archive,
//     archiveLocation: item.archiveLocation,
//     libraryCatalog: item.libraryCatalog,
//     callNumber: item.callNumber,
//     url: item.url,
//     accessDate: item.accessDate,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "AudioRecording")));

// export const billView = pgView("bill").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     billNumber: item.billNumber,
//     code: item.code,
//     codeVolume: item.codeVolume,
//     section: item.section,
//     codePages: item.codePages,
//     legislativeBody: item.legislativeBody,
//     session: item.session,
//     history: item.history,
//     date: item.date,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "Bill")));

// export const blogPostView = pgView("blogPost").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     blogTitle: item.blogTitle,
//     websiteType: item.websiteType,
//     date: item.date,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "BlogPost")));

// export const bookView = pgView("book").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     series: item.series,
//     seriesNumber: item.seriesNumber,
//     volume: item.volume,
//     numberOfVolumes: item.numberOfVolumes,
//     edition: item.edition,
//     place: item.place,
//     publisher: item.publisher,
//     date: item.date,
//     numPages: item.numPages,
//     ISBN: item.ISBN,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     archive: item.archive,
//     archiveLocation: item.archiveLocation,
//     libraryCatalog: item.libraryCatalog,
//     callNumber: item.callNumber,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "Book")));

// export const bookSectionView = pgView("bookSection").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     bookTitle: item.bookTitle,
//     series: item.series,
//     seriesNumber: item.seriesNumber,
//     volume: item.volume,
//     numberOfVolumes: item.numberOfVolumes,
//     edition: item.edition,
//     place: item.place,
//     publisher: item.publisher,
//     date: item.date,
//     pages: item.pages,
//     ISBN: item.ISBN,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     archive: item.archive,
//     archiveLocation: item.archiveLocation,
//     libraryCatalog: item.libraryCatalog,
//     callNumber: item.callNumber,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "BookSection")));

// export const caseView = pgView("case").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     caseName: item.caseName,
//     abstractNote: item.abstractNote,
//     court: item.court,
//     dateDecided: item.dateDecided,
//     docketNumber: item.docketNumber,
//     reporter: item.reporter,
//     reporterVolume: item.reporterVolume,
//     firstPage: item.firstPage,
//     history: item.history,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "Case")));

// export const computerProgramView = pgView("computerProgram").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     seriesTitle: item.seriesTitle,
//     versionNumber: item.versionNumber,
//     date: item.date,
//     system: item.system,
//     place: item.place,
//     company: item.company,
//     programmingLanguage: item.programmingLanguage,
//     ISBN: item.ISBN,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     rights: item.rights,
//     archive: item.archive,
//     archiveLocation: item.archiveLocation,
//     libraryCatalog: item.libraryCatalog,
//     callNumber: item.callNumber,
//     accessDate: item.accessDate,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "ComputerProgram")));

// export const conferencePaperView = pgView("conferencePaper").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     date: item.date,
//     proceedingsTitle: item.proceedingsTitle,
//     conferenceName: item.conferenceName,
//     place: item.place,
//     publisher: item.publisher,
//     volume: item.volume,
//     pages: item.pages,
//     series: item.series,
//     DOI: item.DOI,
//     ISBN: item.ISBN,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     archive: item.archive,
//     archiveLocation: item.archiveLocation,
//     libraryCatalog: item.libraryCatalog,
//     callNumber: item.callNumber,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "ConferencePaper")));

// export const dictionaryEntryView = pgView("dictionaryEntry").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     dictionaryTitle: item.dictionaryTitle,
//     series: item.series,
//     seriesNumber: item.seriesNumber,
//     volume: item.volume,
//     numberOfVolumes: item.numberOfVolumes,
//     edition: item.edition,
//     place: item.place,
//     publisher: item.publisher,
//     date: item.date,
//     pages: item.pages,
//     ISBN: item.ISBN,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     archive: item.archive,
//     archiveLocation: item.archiveLocation,
//     libraryCatalog: item.libraryCatalog,
//     callNumber: item.callNumber,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "DictionaryEntry")));

// export const documentView = pgView("document").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     publisher: item.publisher,
//     date: item.date,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     archive: item.archive,
//     archiveLocation: item.archiveLocation,
//     libraryCatalog: item.libraryCatalog,
//     callNumber: item.callNumber,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "Document")));

// export const emailView = pgView("email").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     subject: item.subject,
//     abstractNote: item.abstractNote,
//     date: item.date,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "Email")));

// export const encyclopediaArticleView = pgView("encyclopediaArticle").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     encyclopediaTitle: item.encyclopediaTitle,
//     series: item.series,
//     seriesNumber: item.seriesNumber,
//     volume: item.volume,
//     numberOfVolumes: item.numberOfVolumes,
//     edition: item.edition,
//     place: item.place,
//     publisher: item.publisher,
//     date: item.date,
//     pages: item.pages,
//     ISBN: item.ISBN,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     archive: item.archive,
//     archiveLocation: item.archiveLocation,
//     libraryCatalog: item.libraryCatalog,
//     callNumber: item.callNumber,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "EncyclopediaArticle")));

// export const filmView = pgView("film").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     distributor: item.distributor,
//     date: item.date,
//     genre: item.genre,
//     videoRecordingFormat: item.videoRecordingFormat,
//     runningTime: item.runningTime,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     archive: item.archive,
//     archiveLocation: item.archiveLocation,
//     libraryCatalog: item.libraryCatalog,
//     callNumber: item.callNumber,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "Film")));

// export const forumPostView = pgView("forumPost").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     forumTitle: item.forumTitle,
//     postType: item.postType,
//     date: item.date,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "ForumPost")));

// export const hearingView = pgView("hearing").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     committee: item.committee,
//     place: item.place,
//     publisher: item.publisher,
//     numberOfVolumes: item.numberOfVolumes,
//     documentNumber: item.documentNumber,
//     pages: item.pages,
//     legislativeBody: item.legislativeBody,
//     session: item.session,
//     history: item.history,
//     date: item.date,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "Hearing")));

// export const instantMessageView = pgView("instantMessage").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     date: item.date,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "InstantMessage")));

// export const interviewView = pgView("interview").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     date: item.date,
//     interviewMedium: item.interviewMedium,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     archive: item.archive,
//     archiveLocation: item.archiveLocation,
//     libraryCatalog: item.libraryCatalog,
//     callNumber: item.callNumber,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "Interview")));

// export const journalArticleView = pgView("journalArticle").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     publicationTitle: item.publicationTitle,
//     volume: item.volume,
//     issue: item.issue,
//     pages: item.pages,
//     date: item.date,
//     series: item.series,
//     seriesTitle: item.seriesTitle,
//     seriesText: item.seriesText,
//     journalAbbreviation: item.journalAbbreviation,
//     DOI: item.DOI,
//     ISSN: item.ISSN,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     archive: item.archive,
//     archiveLocation: item.archiveLocation,
//     libraryCatalog: item.libraryCatalog,
//     callNumber: item.callNumber,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "JournalArticle")));

// export const letterView = pgView("letter").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     letterType: item.letterType,
//     date: item.date,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     archive: item.archive,
//     archiveLocation: item.archiveLocation,
//     libraryCatalog: item.libraryCatalog,
//     callNumber: item.callNumber,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "Letter")));

// export const magazineArticleView = pgView("magazineArticle").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     publicationTitle: item.publicationTitle,
//     volume: item.volume,
//     issue: item.issue,
//     date: item.date,
//     pages: item.pages,
//     ISSN: item.ISSN,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     archive: item.archive,
//     archiveLocation: item.archiveLocation,
//     libraryCatalog: item.libraryCatalog,
//     callNumber: item.callNumber,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "MagazineArticle")));

// export const manuscriptView = pgView("manuscript").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     manuscriptType: item.manuscriptType,
//     place: item.place,
//     date: item.date,
//     numPages: item.numPages,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     archive: item.archive,
//     archiveLocation: item.archiveLocation,
//     libraryCatalog: item.libraryCatalog,
//     callNumber: item.callNumber,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "Manuscript")));

// export const mapView = pgView("map").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     mapType: item.mapType,
//     scale: item.scale,
//     seriesTitle: item.seriesTitle,
//     edition: item.edition,
//     place: item.place,
//     publisher: item.publisher,
//     date: item.date,
//     ISBN: item.ISBN,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     archive: item.archive,
//     archiveLocation: item.archiveLocation,
//     libraryCatalog: item.libraryCatalog,
//     callNumber: item.callNumber,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "Map")));

// export const newspaperArticleView = pgView("newspaperArticle").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     publicationTitle: item.publicationTitle,
//     place: item.place,
//     edition: item.edition,
//     date: item.date,
//     section: item.section,
//     pages: item.pages,
//     shortTitle: item.shortTitle,
//     ISSN: item.ISSN,
//     url: item.url,
//     accessDate: item.accessDate,
//     archive: item.archive,
//     archiveLocation: item.archiveLocation,
//     libraryCatalog: item.libraryCatalog,
//     callNumber: item.callNumber,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "NewspaperArticle")));

// export const noteView = pgView("note").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     note: item.note,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "Note")));

// export const patentView = pgView("patent").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     place: item.place,
//     country: item.country,
//     assignee: item.assignee,
//     issuingAuthority: item.issuingAuthority,
//     patentNumber: item.patentNumber,
//     filingDate: item.filingDate,
//     pages: item.pages,
//     applicationNumber: item.applicationNumber,
//     priorityNumbers: item.priorityNumbers,
//     issueDate: item.issueDate,
//     references: item.references,
//     legalStatus: item.legalStatus,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "Patent")));

// export const podcastView = pgView("podcast").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     seriesTitle: item.seriesTitle,
//     episodeNumber: item.episodeNumber,
//     audioFileType: item.audioFileType,
//     runningTime: item.runningTime,
//     url: item.url,
//     accessDate: item.accessDate,
//     shortTitle: item.shortTitle,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "Podcast")));

// export const presentationView = pgView("presentation").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     presentationType: item.presentationType,
//     date: item.date,
//     place: item.place,
//     meetingName: item.meetingName,
//     url: item.url,
//     accessDate: item.accessDate,
//     shortTitle: item.shortTitle,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "Presentation")));

// export const radioBroadcastView = pgView("radioBroadcast").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     programTitle: item.programTitle,
//     episodeNumber: item.episodeNumber,
//     audioRecordingFormat: item.audioRecordingFormat,
//     place: item.place,
//     network: item.network,
//     date: item.date,
//     runningTime: item.runningTime,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     archive: item.archive,
//     archiveLocation: item.archiveLocation,
//     libraryCatalog: item.libraryCatalog,
//     callNumber: item.callNumber,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "RadioBroadcast")));

// export const reportView = pgView("report").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     reportNumber: item.reportNumber,
//     reportType: item.reportType,
//     seriesTitle: item.seriesTitle,
//     place: item.place,
//     institution: item.institution,
//     date: item.date,
//     pages: item.pages,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     archive: item.archive,
//     archiveLocation: item.archiveLocation,
//     libraryCatalog: item.libraryCatalog,
//     callNumber: item.callNumber,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "Report")));

// export const statuteView = pgView("statute").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     nameOfAct: item.nameOfAct,
//     abstractNote: item.abstractNote,
//     code: item.code,
//     codeNumber: item.codeNumber,
//     publicLawNumber: item.publicLawNumber,
//     dateEnacted: item.dateEnacted,
//     pages: item.pages,
//     section: item.section,
//     session: item.session,
//     history: item.history,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "Statute")));

// export const tvBroadcastView = pgView("tvBroadcast").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     programTitle: item.programTitle,
//     episodeNumber: item.episodeNumber,
//     videoRecordingFormat: item.videoRecordingFormat,
//     place: item.place,
//     network: item.network,
//     date: item.date,
//     runningTime: item.runningTime,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     archive: item.archive,
//     archiveLocation: item.archiveLocation,
//     libraryCatalog: item.libraryCatalog,
//     callNumber: item.callNumber,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "TvBroadcast")));

// export const thesisView = pgView("thesis").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     thesisType: item.thesisType,
//     university: item.university,
//     place: item.place,
//     date: item.date,
//     numPages: item.numPages,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     archive: item.archive,
//     archiveLocation: item.archiveLocation,
//     libraryCatalog: item.libraryCatalog,
//     callNumber: item.callNumber,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "Thesis")));

// export const videoRecordingView = pgView("videoRecording").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     videoRecordingFormat: item.videoRecordingFormat,
//     seriesTitle: item.seriesTitle,
//     volume: item.volume,
//     numberOfVolumes: item.numberOfVolumes,
//     place: item.place,
//     studio: item.studio,
//     date: item.date,
//     runningTime: item.runningTime,
//     ISBN: item.ISBN,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     archive: item.archive,
//     archiveLocation: item.archiveLocation,
//     libraryCatalog: item.libraryCatalog,
//     callNumber: item.callNumber,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "VideoRecording")));

// export const webpageView = pgView("webpage").as(qb.select({
//     id: item.id,
//     itemType: item.itemType,
//     key: item.key,
//     title: item.title,
//     abstractNote: item.abstractNote,
//     websiteTitle: item.websiteTitle,
//     websiteType: item.websiteType,
//     date: item.date,
//     shortTitle: item.shortTitle,
//     url: item.url,
//     accessDate: item.accessDate,
//     rights: item.rights,
//     extra: item.extra,
//     collections: item.collections,
// }).from(item).where(eq(item.itemType, "Webpage")));